# 비용 절감 모드 예시 (돈 되는 것만 삭제)
# - VPC(App, DB)는 유지
# - NAT, VPN, EKS, Jenkins, RDS, S3 등 비용 리소스는 비활성화 가능

# NAT/VPN
enable_nat_gateway     = false
single_nat_gateway     = true
create_vpn_connection  = false

# 주요 워크로드 (필요시만 활성화)
create_eks_cluster     = false
create_jenkins_server  = false
create_jenkins_role    = false
create_rds             = false
create_s3_buckets      = false

# Kubernetes 리소스 (EKS 비활성화 시 false 유지)
create_k8s_resources   = false
# =============================================================================
# Production Environment Configuration
# =============================================================================

# 기본 설정
project_name = "hihypipe"
environment  = "production"
environment_suffix = ""  # 빈 문자열로 설정하면 환경 접미사 없음
resource_prefix = "hihypipe"
owner        = "tjpark"
cost_center  = "engineering"

# AWS 설정
aws_region = "ap-northeast-2"

# EKS 클러스터 설정
create_eks_cluster = true
kubernetes_version = "1.33"
eks_cluster_name = ""  # 빈 문자열이면 자동 생성: hihypipe-eks-cluster

# Jenkins 서버 설정
create_jenkins_server = true

# VPC 설정
vpc_app_cidr = "10.0.0.0/16"
vpc_db_cidr  = "10.1.0.0/16"

# EKS 노드 그룹 설정 (Production - 고가용성)
core_on_node_group = {
  instance_types = ["m7g.large"]
  min_size       = 2  # Production: AZ별 최소 1개
  max_size       = 10
  desired_size   = 2
  labels = {
    "node-role" = "core"
  }
}

airflow_core_on_node_group = {
  instance_types = ["m7g.large"]
  min_size       = 2  # Production: AZ별 최소 1개
  max_size       = 10
  desired_size   = 2
  labels = {
    "workload" = "airflow-core"
  }
}

airflow_worker_spot_node_group = {
  instance_types = ["m7g.large", "m7g.xlarge", "m7g.2xlarge"]
  min_size       = 0
  max_size       = 50
  desired_size   = 0
  labels = {
    "workload" = "airflow-worker"
  }
}

spark_driver_on_node_group = {
  instance_types = ["m7g.large"]
  min_size       = 2  # Production: AZ별 최소 1개
  max_size       = 10
  desired_size   = 2
  labels = {
    "workload" = "spark-driver"
  }
}

spark_exec_spot_node_group = {
  instance_types = ["m7g.large", "m7g.xlarge", "m7g.2xlarge", "m7g.4xlarge"]
  min_size       = 0
  max_size       = 100
  desired_size   = 0
  labels = {
    "workload" = "spark-executor"
  }
}

kafka_storage_on_node_group = {
  instance_types = ["m7g.large"]
  min_size       = 3  # Production: AZ별 최소 1개 (Kafka 고가용성)
  max_size       = 10
  desired_size   = 3
  labels = {
    "workload" = "kafka-storage"
  }
}

gpu_spot_node_group = {
  instance_types = ["g5.xlarge", "g5.2xlarge", "g5.4xlarge"]
  min_size       = 0
  max_size       = 20
  desired_size   = 0
  labels = {
    "workload" = "gpu"
  }
}

# RDS 설정 (Production)
create_rds = true
rds_instance_class = "db.r6g.large"  # Production: 더 큰 인스턴스
rds_allocated_storage = 100
rds_max_allocated_storage = 1000
rds_engine_version = "17.6"
rds_backup_retention_period = 7
rds_backup_window = "03:00-04:00"
rds_maintenance_window = "sun:04:00-sun:05:00"
rds_multi_az = true  # Production: Multi-AZ 활성화

# S3 설정
create_s3_buckets = true

# Kubernetes 리소스 생성
create_k8s_resources = false  # 초기 배포 시 false, 나중에 true로 변경

# EKS 보안 설정
eks_public_access_enabled = true
eks_additional_public_access_cidrs = []  # Production: 추가 IP 필요시 설정
eks_allow_all_ips = false  # Production: 보안상 false