apiVersion: batch/v1
kind: Job
metadata:
  name: rds-table-setup-job
  namespace: web-tier
  labels:
    app: rds-setup
    component: database-migration
    version: "1.0.0"
spec:
  # Job 완료 후 자동 정리 (24시간 후)
  ttlSecondsAfterFinished: 86400
  # 최대 3번 재시도
  backoffLimit: 3
  # 10분 내에 완료되지 않으면 실패 처리
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        app: rds-setup
        component: database-migration
    spec:
      # Job 완료 후 Pod 재시작 안함
      restartPolicy: Never
      
      # 보안 컨텍스트
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999

      containers:
      - name: postgres-client
        image: postgres:17-alpine
        
        # 환경 변수
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: rds-credentials
              key: password
        - name: PGHOST
          valueFrom:
            secretKeyRef:
              name: rds-credentials
              key: host
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: rds-credentials
              key: username
        - name: PGDATABASE
          valueFrom:
            secretKeyRef:
              name: rds-credentials
              key: database
        - name: PGPORT
          value: "5432"
        
        # 실행 명령
        command:
        - /bin/sh
        - -c
        - |
          echo "=========================================="
          echo "RDS PostgreSQL 테이블 설정 시작"
          echo "=========================================="
          echo "호스트: $PGHOST"
          echo "사용자: $PGUSER"
          echo "데이터베이스: $PGDATABASE"
          echo "포트: $PGPORT"
          echo ""
          
          # RDS 연결 테스트
          echo "🔌 RDS 연결 테스트 중..."
          if psql -c "SELECT version();" > /dev/null 2>&1; then
            echo "✅ RDS 연결 성공"
          else
            echo "❌ RDS 연결 실패"
            exit 1
          fi
          echo ""
          
          # 기존 테이블 확인
          echo "🔍 기존 테이블 확인 중..."
          EXISTING_TABLES=$(psql -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';")
          echo "기존 테이블 수: $EXISTING_TABLES"
          echo ""
          
          # SQL 스크립트 실행
          echo "📜 테이블 생성 스크립트 실행 중..."
          if psql -f /sql/setup-tables.sql; then
            echo "✅ 테이블 생성 스크립트 실행 성공"
          else
            echo "❌ 테이블 생성 스크립트 실행 실패"
            exit 1
          fi
          echo ""
          
          # 생성된 테이블 확인
          echo "📊 생성된 테이블 확인 중..."
          NEW_TABLES=$(psql -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';")
          echo "총 테이블 수: $NEW_TABLES"
          echo ""
          
          echo "📋 테이블 목록:"
          psql -c "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE' ORDER BY table_name;"
          echo ""
          
          # 필수 테이블 존재 확인
          echo "🔍 필수 테이블 존재 확인 중..."
          REQUIRED_TABLES="users user_profiles products categories crawl_jobs analysis_requests analysis_results"
          MISSING_TABLES=""
          
          for table in $REQUIRED_TABLES; do
            if psql -t -c "SELECT 1 FROM information_schema.tables WHERE table_schema = 'public' AND table_name = '$table';" | grep -q 1; then
              echo "✅ $table"
            else
              echo "❌ $table (누락)"
              MISSING_TABLES="$MISSING_TABLES $table"
            fi
          done
          
          if [ -n "$MISSING_TABLES" ]; then
            echo ""
            echo "❌ 누락된 필수 테이블이 있습니다: $MISSING_TABLES"
            exit 1
          fi
          
          echo ""
          echo "🎉 RDS PostgreSQL 테이블 설정 완료!"
          echo "=========================================="
          echo "✅ 모든 필수 테이블이 성공적으로 생성되었습니다."
          echo "✅ 회원가입/로그인 기능 사용 가능"
          echo "✅ 크롤링 결과 저장 기능 사용 가능"
          echo "=========================================="
        
        # 볼륨 마운트
        volumeMounts:
        - name: sql-script
          mountPath: /sql
          readOnly: true
        
        # 리소스 제한
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        
        # 보안 컨텍스트
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      # 볼륨 정의
      volumes:
      - name: sql-script
        configMap:
          name: rds-table-setup-sql
          defaultMode: 0444
      
      # 노드 선택자 (선택사항)
      nodeSelector:
        kubernetes.io/arch: arm64
      
      # 톨러레이션 (선택사항)
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
# RDS 자격 증명 시크릿 (실제 백엔드 설정에 맞춤)
apiVersion: v1
kind: Secret
metadata:
  name: rds-credentials
  namespace: web-tier
  labels:
    app: rds-setup
    component: database-credentials
type: Opaque
stringData:
  host: "airflow-metadata-db.cxkoo6wi2dyy.ap-northeast-2.rds.amazonaws.com"
  username: "kosa_user"
  password: "secure_password_2024"
  database: "kosa_db"