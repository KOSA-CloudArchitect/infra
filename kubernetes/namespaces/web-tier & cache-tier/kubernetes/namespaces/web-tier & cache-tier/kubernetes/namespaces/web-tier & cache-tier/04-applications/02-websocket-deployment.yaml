# EKS Migration - WebSocket Deployment and Service
# Task 3.4: WebSocket Deployment 및 Service 작성

---
# WebSocket Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: websocket-deployment
  namespace: web-tier
  labels:
    app: websocket
    app.kubernetes.io/name: websocket
    app.kubernetes.io/part-of: review-analysis-system
    app.kubernetes.io/component: websocket
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: websocket
      app.kubernetes.io/name: websocket
  template:
    metadata:
      labels:
        app: websocket
        app.kubernetes.io/name: websocket
        app.kubernetes.io/part-of: review-analysis-system
        app.kubernetes.io/component: websocket
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3002"
        prometheus.io/path: "/metrics"
    spec:
      # 보안 컨텍스트
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      
      # 초기화 컨테이너 (Redis 연결 대기)
      initContainers:
      - name: wait-for-redis
        image: redis:7-alpine
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for Redis..."
          until redis-cli -h $REDIS_HOST -p $REDIS_PORT -a $REDIS_PASSWORD ping; do
            echo "Redis not ready, waiting..."
            sleep 5
          done
          echo "Redis is ready!"
        env:
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      containers:
      - name: websocket
        image: 150297826798.dkr.ecr.ap-northeast-2.amazonaws.com/web-tier/websocket:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 3002
          protocol: TCP
        
        # 환경 변수 (ConfigMap에서 가져오기)
        envFrom:
        - configMapRef:
            name: app-config
        
        env:
        # 기본 설정
        - name: PORT
          value: "3002"
        - name: HOST
          value: "0.0.0.0"
        
        # Redis 연결 정보 (Secret에서 가져오기)
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PASSWORD
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_URL
        
        # CORS 설정
        - name: ALLOWED_ORIGINS
          value: "http://frontend-service.web-tier.svc.cluster.local:3000,https://your-domain.com,http://review-analysis-web-alb-2002000396.ap-northeast-2.elb.amazonaws.com,https://review-analysis-web-alb-2002000396.ap-northeast-2.elb.amazonaws.com"
        
        # Sentry 설정
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: SENTRY_DSN
              optional: true
        
        # WebSocket 특화 설정
        - name: WEBSOCKET_PING_TIMEOUT
          value: "60000"
        - name: WEBSOCKET_PING_INTERVAL
          value: "25000"
        - name: WEBSOCKET_MAX_CONNECTIONS
          value: "1000"
        - name: WEBSOCKET_TRANSPORTS
          value: "websocket,polling"
        
        # 리소스 제한
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
            ephemeral-storage: "500Mi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
        
        # 보안 컨텍스트
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # 볼륨 마운트 (로그 및 임시 파일용)
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: logs-volume
          mountPath: /app/logs
        
        # Liveness Probe (WebSocket 헬스체크)
        livenessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: User-Agent
              value: "k8s-liveness-probe"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Readiness Probe (WebSocket 준비 상태 확인)
        readinessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: User-Agent
              value: "k8s-readiness-probe"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        # Startup Probe (초기 시작 시간 고려)
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
          successThreshold: 1
      
      # 볼륨 정의
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: 500Mi
      - name: logs-volume
        emptyDir:
          sizeLimit: 500Mi
      
      # DNS 설정
      dnsPolicy: ClusterFirst
      
      # 재시작 정책
      restartPolicy: Always
      
      # 종료 유예 시간 (WebSocket 연결 정리 시간 고려)
      terminationGracePeriodSeconds: 45
      
      # 노드 선택 (선택사항)
      nodeSelector:
        kubernetes.io/arch: arm64
      
      # 톨러레이션 (선택사항)
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
# WebSocket Service
apiVersion: v1
kind: Service
metadata:
  name: websocket-service
  namespace: web-tier
  labels:
    app: websocket
    app.kubernetes.io/name: websocket-service
    app.kubernetes.io/part-of: review-analysis-system
    app.kubernetes.io/component: websocket
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    # WebSocket 연결 유지를 위한 설정
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
spec:
  type: ClusterIP
  selector:
    app: websocket
    app.kubernetes.io/name: websocket
  ports:
  - name: http
    port: 3002
    targetPort: http
    protocol: TCP
  # WebSocket 연결 유지를 위한 세션 어피니티
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600

---
# WebSocket HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: websocket-hpa
  namespace: web-tier
  labels:
    app: websocket
    app.kubernetes.io/name: websocket-hpa
    app.kubernetes.io/part-of: review-analysis-system
    app.kubernetes.io/component: websocket
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: websocket-deployment
  minReplicas: 2
  maxReplicas: 4
  metrics:
  # CPU 기반 스케일링
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  # 메모리 기반 스케일링
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  # 스케일링 동작 설정 (WebSocket 연결 특성 고려)
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 25
        periodSeconds: 120
      selectPolicy: Min

---
# WebSocket PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: websocket-pdb
  namespace: web-tier
  labels:
    app: websocket
    app.kubernetes.io/name: websocket-pdb
    app.kubernetes.io/part-of: review-analysis-system
    app.kubernetes.io/component: websocket
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: websocket
      app.kubernetes.io/name: websocket

---
# WebSocket ConfigMap (WebSocket 특화 설정)
apiVersion: v1
kind: ConfigMap
metadata:
  name: websocket-config
  namespace: web-tier
  labels:
    app: websocket
    app.kubernetes.io/name: websocket-config
    app.kubernetes.io/part-of: review-analysis-system
    app.kubernetes.io/component: websocket
data:
  # Socket.IO 설정
  socket-io-config.json: |
    {
      "pingTimeout": 60000,
      "pingInterval": 25000,
      "upgradeTimeout": 10000,
      "maxHttpBufferSize": 1048576,
      "allowEIO3": true,
      "transports": ["websocket", "polling"],
      "cors": {
        "origin": true,
        "credentials": true,
        "methods": ["GET", "POST", "OPTIONS"]
      }
    }
  
  # Redis 어댑터 설정
  redis-adapter-config.json: |
    {
      "retryDelayOnFailover": 100,
      "enableReadyCheck": false,
      "maxRetriesPerRequest": null,
      "lazyConnect": true,
      "keepAlive": 30000,
      "family": 4,
      "connectTimeout": 10000,
      "commandTimeout": 5000
    }