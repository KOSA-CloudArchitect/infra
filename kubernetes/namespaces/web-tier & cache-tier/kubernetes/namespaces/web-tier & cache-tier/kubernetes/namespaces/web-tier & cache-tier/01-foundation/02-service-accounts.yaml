# EKS Migration - Service Accounts and RBAC
# Task 1.2: 기본 RBAC 및 ServiceAccount 설정

---
# Service Account for backend applications
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend-sa
  namespace: backend
  labels:
    app.kubernetes.io/part-of: review-analysis-system
    tier: backend
  annotations:
    description: "Service account for backend applications"

---
# Service Account for redis applications
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis-sa
  namespace: redis
  labels:
    app.kubernetes.io/part-of: review-analysis-system
    tier: cache
  annotations:
    description: "Service account for redis applications"

---
# Service Account for kafka applications
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka-sa
  namespace: kafka
  labels:
    app.kubernetes.io/part-of: review-analysis-system
    tier: messaging
  annotations:
    description: "Service account for kafka applications"

---
# ClusterRole for backend applications
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: backend-role
  labels:
    app.kubernetes.io/part-of: review-analysis-system
rules:
# Allow reading services and endpoints for service discovery
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
# Allow reading configmaps and secrets in own namespace
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
# Allow reading pods for health checks
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

---
# ClusterRole for redis applications
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: redis-role
  labels:
    app.kubernetes.io/part-of: review-analysis-system
rules:
# Allow reading services and endpoints for service discovery
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
# Allow reading configmaps and secrets in own namespace
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
# Allow reading pods for health checks
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
# Allow managing persistent volumes for Redis data
- apiGroups: [""]
  resources: ["persistentvolumes", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]

---
# ClusterRole for kafka applications
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kafka-role
  labels:
    app.kubernetes.io/part-of: review-analysis-system
rules:
# Allow reading services and endpoints for service discovery
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
# Allow reading configmaps and secrets in own namespace
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
# Allow reading pods for health checks
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
# Allow managing persistent volumes for Kafka data
- apiGroups: [""]
  resources: ["persistentvolumes", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding for backend
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: backend-binding
  labels:
    app.kubernetes.io/part-of: review-analysis-system
subjects:
- kind: ServiceAccount
  name: backend-sa
  namespace: backend
roleRef:
  kind: ClusterRole
  name: backend-role
  apiGroup: rbac.authorization.k8s.io

---
# ClusterRoleBinding for redis
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: redis-binding
  labels:
    app.kubernetes.io/part-of: review-analysis-system
subjects:
- kind: ServiceAccount
  name: redis-sa
  namespace: redis
roleRef:
  kind: ClusterRole
  name: redis-role
  apiGroup: rbac.authorization.k8s.io

---
# ClusterRoleBinding for kafka
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kafka-binding
  labels:
    app.kubernetes.io/part-of: review-analysis-system
subjects:
- kind: ServiceAccount
  name: kafka-sa
  namespace: kafka
roleRef:
  kind: ClusterRole
  name: kafka-role
  apiGroup: rbac.authorization.k8s.io

---
# Role for backend namespace-specific permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: backend
  name: backend-namespace-role
  labels:
    app.kubernetes.io/part-of: review-analysis-system
rules:
# Allow full access to configmaps and secrets in own namespace
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Allow managing pods and services in own namespace
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# Role for redis namespace-specific permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: redis
  name: redis-namespace-role
  labels:
    app.kubernetes.io/part-of: review-analysis-system
rules:
# Allow full access to configmaps and secrets in own namespace
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Allow managing pods and services in own namespace
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Allow managing persistent volume claims
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# Role for kafka namespace-specific permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: kafka
  name: kafka-namespace-role
  labels:
    app.kubernetes.io/part-of: review-analysis-system
rules:
# Allow full access to configmaps and secrets in own namespace
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Allow managing pods and services in own namespace
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Allow managing persistent volume claims
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# RoleBinding for backend namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: backend-namespace-binding
  namespace: backend
  labels:
    app.kubernetes.io/part-of: review-analysis-system
subjects:
- kind: ServiceAccount
  name: backend-sa
  namespace: backend
roleRef:
  kind: Role
  name: backend-namespace-role
  apiGroup: rbac.authorization.k8s.io

---
# RoleBinding for redis namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: redis-namespace-binding
  namespace: redis
  labels:
    app.kubernetes.io/part-of: review-analysis-system
subjects:
- kind: ServiceAccount
  name: redis-sa
  namespace: redis
roleRef:
  kind: Role
  name: redis-namespace-role
  apiGroup: rbac.authorization.k8s.io

---
# RoleBinding for kafka namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kafka-namespace-binding
  namespace: kafka
  labels:
    app.kubernetes.io/part-of: review-analysis-system
subjects:
- kind: ServiceAccount
  name: kafka-sa
  namespace: kafka
roleRef:
  kind: Role
  name: kafka-namespace-role
  apiGroup: rbac.authorization.k8s.io