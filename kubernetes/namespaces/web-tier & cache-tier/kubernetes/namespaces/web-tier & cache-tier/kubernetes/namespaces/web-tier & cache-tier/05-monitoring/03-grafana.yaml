# EKS Migration - Grafana Dashboard
# Task 6.1: Grafana 대시보드 배포 및 기본 대시보드 구성

---
# Grafana ConfigMap for Datasources
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
  labels:
    app: grafana
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: review-analysis-system
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus-service:9090
      isDefault: true
      editable: true

---
# Grafana ConfigMap for Dashboards Provider
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-providers
  namespace: monitoring
  labels:
    app: grafana
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: review-analysis-system
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

---
# Grafana ConfigMap for KOSA System Dashboard
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-kosa
  namespace: monitoring
  labels:
    app: grafana
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: review-analysis-system
data:
  kosa-system-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "KOSA 시스템 모니터링",
        "tags": ["kosa", "system"],
        "timezone": "Asia/Seoul",
        "panels": [
          {
            "id": 1,
            "title": "API 응답 시간 (95th Percentile)",
            "type": "stat",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
                "legendFormat": "95th percentile"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "s",
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 1},
                    {"color": "red", "value": 2}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "HTTP 요청 수 (분당)",
            "type": "stat",
            "targets": [
              {
                "expr": "rate(http_requests_total[1m]) * 60",
                "legendFormat": "Requests/min"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "reqps"
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "에러율 (%)",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{status_code=~\"5..\"}[5m]) / rate(http_requests_total[5m]) * 100",
                "legendFormat": "Error Rate"
              }
            ],
            "yAxes": [
              {"unit": "percent", "max": 100}
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Pod CPU 사용률",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total{namespace=~\"web-tier|cache-tier\"}[5m]) * 100",
                "legendFormat": "{{pod}}"
              }
            ],
            "yAxes": [
              {"unit": "percent"}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
          },
          {
            "id": 5,
            "title": "Pod 메모리 사용률",
            "type": "graph",
            "targets": [
              {
                "expr": "(container_memory_usage_bytes{namespace=~\"web-tier|cache-tier\"} / container_spec_memory_limit_bytes) * 100",
                "legendFormat": "{{pod}}"
              }
            ],
            "yAxes": [
              {"unit": "percent", "max": 100}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
          },
          {
            "id": 6,
            "title": "Redis 연결 수",
            "type": "graph",
            "targets": [
              {
                "expr": "redis_connected_clients",
                "legendFormat": "Connected Clients"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 24}
          },
          {
            "id": 7,
            "title": "Redis 메모리 사용량",
            "type": "graph",
            "targets": [
              {
                "expr": "redis_memory_used_bytes",
                "legendFormat": "Memory Used"
              }
            ],
            "yAxes": [
              {"unit": "bytes"}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 24}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

---
# Grafana Secret for Admin Password
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: monitoring
  labels:
    app: grafana
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: review-analysis-system
type: Opaque
stringData:
  admin-user: admin
  admin-password: kosa-admin-2024

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: review-analysis-system
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.1.0
        ports:
        - containerPort: 3000
          name: web
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: admin-password
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
          readOnly: false
        - name: grafana-dashboard-providers
          mountPath: /etc/grafana/provisioning/dashboards
          readOnly: false
        - name: grafana-dashboard-kosa
          mountPath: /var/lib/grafana/dashboards
          readOnly: false
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: grafana-storage
        emptyDir: {}
      - name: grafana-datasources
        configMap:
          defaultMode: 420
          name: grafana-datasources
      - name: grafana-dashboard-providers
        configMap:
          defaultMode: 420
          name: grafana-dashboard-providers
      - name: grafana-dashboard-kosa
        configMap:
          defaultMode: 420
          name: grafana-dashboard-kosa

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: monitoring
  labels:
    app: grafana
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: review-analysis-system
spec:
  selector:
    app: grafana
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    name: web