# Redis Configuration ConfigMap
# Task 4.1: Redis StatefulSet 배포 - 기존 설정과 호환되는 Redis 구성

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: cache-tier
  labels:
    app: redis
    component: config
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: review-analysis-system
data:
  # Redis Master 설정
  redis-master.conf: |
    # 네트워크 설정
    bind 0.0.0.0
    port 6379
    protected-mode no
    
    # 메모리 설정 (기존 설정과 호환)
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    
    # 지속성 설정 (기존 AOF 설정 유지)
    appendonly yes
    appendfsync everysec
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    
    # RDB 백업 설정
    save 900 1
    save 300 10
    save 60 10000
    
    # 로그 설정
    loglevel notice
    
    # 클라이언트 설정 (기존 keepAlive 설정과 호환)
    tcp-keepalive 300
    timeout 0
    
    # 복제 설정
    replica-serve-stale-data yes
    replica-read-only yes
    
    # 보안 설정
    # requirepass는 Secret에서 설정

  # Redis Slave 설정
  redis-slave.conf: |
    # 네트워크 설정
    bind 0.0.0.0
    port 6379
    protected-mode no
    
    # 메모리 설정
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    
    # 지속성 설정 (Slave는 AOF 비활성화로 성능 최적화)
    appendonly no
    
    # RDB 백업 설정 (Slave는 백업 주기 길게)
    save 1800 1
    save 600 10
    save 300 100
    
    # 로그 설정
    loglevel notice
    
    # 클라이언트 설정
    tcp-keepalive 300
    timeout 0
    
    # 복제 설정
    replica-serve-stale-data yes
    replica-read-only yes
    replica-priority 100
    
    # Master 연결 설정 (환경변수로 주입)
    # replicaof redis-master-0.redis-master.cache-tier.svc.cluster.local 6379

---
# Redis 초기화 스크립트
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-scripts
  namespace: cache-tier
  labels:
    app: redis
    component: scripts
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: review-analysis-system
data:
  # Master 초기화 스크립트
  init-master.sh: |
    #!/bin/bash
    set -e
    
    echo "🚀 Redis Master 초기화 시작..."
    
    # 설정 파일 복사
    cp /config/redis-master.conf /data/redis.conf
    
    # 비밀번호 설정 (Secret에서 주입)
    if [ ! -z "$REDIS_PASSWORD" ]; then
        echo "requirepass $REDIS_PASSWORD" >> /data/redis.conf
        echo "masterauth $REDIS_PASSWORD" >> /data/redis.conf
    fi
    
    # 데이터 디렉토리 권한 설정 (권한 문제로 주석 처리)
    # chown -R redis:redis /data
    # chmod 755 /data
    
    echo "✅ Redis Master 초기화 완료"
    
    # Redis 서버 시작
    exec redis-server /data/redis.conf

  # Slave 초기화 스크립트
  init-slave.sh: |
    #!/bin/bash
    set -e
    
    echo "🚀 Redis Slave 초기화 시작..."
    
    # 설정 파일 복사
    cp /config/redis-slave.conf /data/redis.conf
    
    # Master 연결 설정
    MASTER_HOST="redis-master-0.redis-master.cache-tier.svc.cluster.local"
    echo "replicaof $MASTER_HOST 6379" >> /data/redis.conf
    
    # 비밀번호 설정 (Secret에서 주입)
    if [ ! -z "$REDIS_PASSWORD" ]; then
        echo "requirepass $REDIS_PASSWORD" >> /data/redis.conf
        echo "masterauth $REDIS_PASSWORD" >> /data/redis.conf
    fi
    
    # 데이터 디렉토리 권한 설정 (권한 문제로 주석 처리)
    # chown -R redis:redis /data
    # chmod 755 /data
    
    echo "✅ Redis Slave 초기화 완료"
    
    # Master 연결 대기
    echo "⏳ Master 연결 대기 중..."
    until redis-cli -h $MASTER_HOST -p 6379 ping; do
        echo "Master 연결 대기 중... (5초 후 재시도)"
        sleep 5
    done
    
    echo "✅ Master 연결 확인됨"
    
    # Redis 서버 시작
    exec redis-server /data/redis.conf

  # 헬스체크 스크립트
  health-check.sh: |
    #!/bin/bash
    
    # Redis 연결 테스트
    if [ ! -z "$REDIS_PASSWORD" ]; then
        redis-cli -a "$REDIS_PASSWORD" ping
    else
        redis-cli ping
    fi

  # 백업 스크립트
  backup.sh: |
    #!/bin/bash
    set -e
    
    BACKUP_DIR="/backup"
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    
    echo "🔄 Redis 백업 시작: $TIMESTAMP"
    
    # 백업 디렉토리 생성
    mkdir -p $BACKUP_DIR
    
    # RDB 백업
    if [ ! -z "$REDIS_PASSWORD" ]; then
        redis-cli -a "$REDIS_PASSWORD" BGSAVE
    else
        redis-cli BGSAVE
    fi
    
    # 백업 완료 대기
    while [ $(redis-cli -a "$REDIS_PASSWORD" LASTSAVE) -eq $(redis-cli -a "$REDIS_PASSWORD" LASTSAVE) ]; do
        sleep 1
    done
    
    # 백업 파일 복사
    cp /data/dump.rdb $BACKUP_DIR/dump_$TIMESTAMP.rdb
    
    # AOF 백업 (존재하는 경우)
    if [ -f /data/appendonly.aof ]; then
        cp /data/appendonly.aof $BACKUP_DIR/appendonly_$TIMESTAMP.aof
    fi
    
    echo "✅ Redis 백업 완료: $BACKUP_DIR"
    
    # 오래된 백업 파일 정리 (7일 이상)
    find $BACKUP_DIR -name "*.rdb" -mtime +7 -delete
    find $BACKUP_DIR -name "*.aof" -mtime +7 -delete