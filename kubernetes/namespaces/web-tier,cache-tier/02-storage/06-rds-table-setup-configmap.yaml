apiVersion: v1
kind: ConfigMap
metadata:
  name: rds-table-setup-sql
  namespace: web-tier
  labels:
    app: rds-setup
    component: database-migration
data:
  setup-tables.sql: |
    -- ========================================
    -- RDS PostgreSQL 테이블 설정 스크립트
    -- 회원가입, 로그인, 크롤링 결과 저장을 위한 완전한 스키마
    -- ========================================

    -- 확장 기능 활성화
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";

    -- ========================================
    -- 1. 사용자 관리 테이블
    -- ========================================

    -- 사용자 기본 정보
    CREATE TABLE IF NOT EXISTS users (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        email VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        role VARCHAR(20) DEFAULT 'user' CHECK (role IN ('user', 'admin')),
        is_active BOOLEAN DEFAULT true,
        email_verified BOOLEAN DEFAULT false,
        last_login_at TIMESTAMP WITH TIME ZONE,
        failed_login_attempts INTEGER DEFAULT 0,
        locked_until TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- 사용자 프로필 (확장 정보)
    CREATE TABLE IF NOT EXISTS user_profiles (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        user_id VARCHAR(50) UNIQUE NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        phone VARCHAR(20),
        avatar_url VARCHAR(500),
        timezone VARCHAR(50) DEFAULT 'Asia/Seoul',
        language VARCHAR(10) DEFAULT 'ko',
        notification_preferences JSONB DEFAULT '{"email": true, "push": true, "priceAlert": true}'::jsonb,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- 사용자 세션 (JWT refresh token 관리)
    CREATE TABLE IF NOT EXISTS user_sessions (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        user_id VARCHAR(50) NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        refresh_token_hash VARCHAR(255) NOT NULL,
        device_info JSONB,
        ip_address INET,
        user_agent TEXT,
        expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        last_used_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- ========================================
    -- 2. 상품 관리 테이블
    -- ========================================

    -- 상품 카테고리
    CREATE TABLE IF NOT EXISTS categories (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        name VARCHAR(255) NOT NULL,
        parent_id VARCHAR(50) REFERENCES categories(id),
        path VARCHAR(1000) NOT NULL,
        level INTEGER DEFAULT 0,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- 상품 정보 (크롤링 결과 저장)
    CREATE TABLE IF NOT EXISTS products (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        name VARCHAR(500) NOT NULL,
        url VARCHAR(1000) UNIQUE NOT NULL,
        product_code VARCHAR(100), -- 쿠팡 상품 코드
        category_id VARCHAR(50) REFERENCES categories(id),
        current_price DECIMAL(12,2),
        original_price DECIMAL(12,2), -- 원가
        average_rating DECIMAL(3,2),
        total_reviews INTEGER DEFAULT 0,
        image_url VARCHAR(1000),
        is_active BOOLEAN DEFAULT true,
        last_crawled_at TIMESTAMP WITH TIME ZONE,
        crawl_source VARCHAR(50) DEFAULT 'coupang', -- 크롤링 소스
        crawl_metadata JSONB, -- 크롤링 관련 메타데이터
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- 가격 변동 이력
    CREATE TABLE IF NOT EXISTS price_history (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        product_id VARCHAR(50) NOT NULL REFERENCES products(id) ON DELETE CASCADE,
        price DECIMAL(12,2) NOT NULL,
        price_type VARCHAR(20) DEFAULT 'current' CHECK (price_type IN ('current', 'original', 'discount')),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- ========================================
    -- 3. 검색 및 크롤링 관리
    -- ========================================

    -- 검색 기록
    CREATE TABLE IF NOT EXISTS search_history (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        user_id VARCHAR(50) REFERENCES users(id) ON DELETE CASCADE,
        query VARCHAR(500) NOT NULL,
        result_count INTEGER DEFAULT 0,
        search_type VARCHAR(20) DEFAULT 'product' CHECK (search_type IN ('product', 'keyword', 'category')),
        ip_address INET,
        user_agent TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- 크롤링 작업 로그
    CREATE TABLE IF NOT EXISTS crawl_jobs (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        keyword VARCHAR(500) NOT NULL,
        max_links INTEGER DEFAULT 10,
        status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'failed')),
        total_found INTEGER DEFAULT 0,
        total_saved INTEGER DEFAULT 0,
        error_message TEXT,
        started_at TIMESTAMP WITH TIME ZONE,
        completed_at TIMESTAMP WITH TIME ZONE,
        processing_time_seconds INTEGER,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- 크롤링 작업과 상품 연결 테이블
    CREATE TABLE IF NOT EXISTS crawl_job_products (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        crawl_job_id VARCHAR(50) NOT NULL REFERENCES crawl_jobs(id) ON DELETE CASCADE,
        product_id VARCHAR(50) NOT NULL REFERENCES products(id) ON DELETE CASCADE,
        crawl_order INTEGER, -- 크롤링된 순서
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(crawl_job_id, product_id)
    );

    -- ========================================
    -- 4. 분석 관련 테이블
    -- ========================================

    -- 분석 요청
    CREATE TABLE IF NOT EXISTS analysis_requests (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        user_id VARCHAR(50) REFERENCES users(id) ON DELETE SET NULL,
        product_id VARCHAR(50) NOT NULL REFERENCES products(id) ON DELETE CASCADE,
        product_url VARCHAR(1000),
        task_id VARCHAR(100) UNIQUE NOT NULL,
        status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED')),
        progress INTEGER DEFAULT 0 CHECK (progress >= 0 AND progress <= 100),
        request_type VARCHAR(20) NOT NULL CHECK (request_type IN ('REALTIME', 'INTEREST_ANALYSIS', 'SCHEDULED')),
        priority INTEGER DEFAULT 5 CHECK (priority >= 1 AND priority <= 10),
        estimated_time INTEGER, -- 예상 완료 시간 (초)
        error_message TEXT,
        metadata JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        completed_at TIMESTAMP WITH TIME ZONE
    );

    -- 분석 결과
    CREATE TABLE IF NOT EXISTS analysis_results (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        product_id VARCHAR(50) NOT NULL REFERENCES products(id) ON DELETE CASCADE,
        task_id VARCHAR(100) UNIQUE NOT NULL,
        status VARCHAR(20) DEFAULT 'completed' CHECK (status IN ('completed', 'failed')),
        sentiment_positive DECIMAL(5,4),
        sentiment_negative DECIMAL(5,4),
        sentiment_neutral DECIMAL(5,4),
        summary TEXT,
        final_keywords JSONB,
        total_reviews INTEGER DEFAULT 0,
        average_rating DECIMAL(3,2),
        rating_distribution JSONB,
        processing_time INTEGER, -- 처리 시간 (초)
        error_message TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- ========================================
    -- 5. 관심 상품 관리
    -- ========================================

    -- 관심 상품 목록
    CREATE TABLE IF NOT EXISTS watch_list (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        user_id VARCHAR(50) NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        product_id VARCHAR(50) NOT NULL REFERENCES products(id) ON DELETE CASCADE,
        price_alert BOOLEAN DEFAULT true,
        target_price DECIMAL(12,2),
        last_notified_at TIMESTAMP WITH TIME ZONE,
        analysis_frequency VARCHAR(20) DEFAULT 'daily' CHECK (analysis_frequency IN ('daily', 'weekly', 'monthly')),
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, product_id)
    );

    -- ========================================
    -- 6. 알림 관리
    -- ========================================

    -- 알림 로그
    CREATE TABLE IF NOT EXISTS notification_logs (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        user_id VARCHAR(50) NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        type VARCHAR(50) NOT NULL CHECK (type IN ('PRICE_DROP', 'REVIEW_CHANGE', 'ANALYSIS_COMPLETE', 'SYSTEM')),
        channel VARCHAR(20) NOT NULL CHECK (channel IN ('EMAIL', 'PUSH', 'WEB', 'SMS')),
        title VARCHAR(255) NOT NULL,
        message TEXT NOT NULL,
        data JSONB, -- 추가 데이터
        status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'SENT', 'FAILED', 'CANCELLED')),
        sent_at TIMESTAMP WITH TIME ZONE,
        error_message TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- 사용자 알림 설정
    CREATE TABLE IF NOT EXISTS notification_settings (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        user_id VARCHAR(50) UNIQUE NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        email_enabled BOOLEAN DEFAULT true,
        push_enabled BOOLEAN DEFAULT true,
        web_enabled BOOLEAN DEFAULT true,
        price_drop_enabled BOOLEAN DEFAULT true,
        review_change_enabled BOOLEAN DEFAULT true,
        analysis_complete_enabled BOOLEAN DEFAULT true,
        price_drop_threshold DECIMAL(5,2) DEFAULT 10.0, -- 가격 하락 임계값 (%)
        review_change_threshold DECIMAL(5,2) DEFAULT 5.0, -- 리뷰 변화 임계값 (%)
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- ========================================
    -- 7. 시스템 설정
    -- ========================================

    -- 시스템 설정
    CREATE TABLE IF NOT EXISTS system_config (
        id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
        key VARCHAR(100) UNIQUE NOT NULL,
        value JSONB NOT NULL,
        description TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    -- ========================================
    -- 8. 인덱스 생성
    -- ========================================

    -- 사용자 관련 인덱스
    CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
    CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);
    CREATE INDEX IF NOT EXISTS idx_users_is_active ON users(is_active);
    CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(created_at);

    -- 세션 관련 인덱스
    CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id);
    CREATE INDEX IF NOT EXISTS idx_user_sessions_refresh_token_hash ON user_sessions(refresh_token_hash);
    CREATE INDEX IF NOT EXISTS idx_user_sessions_expires_at ON user_sessions(expires_at);

    -- 상품 관련 인덱스
    CREATE INDEX IF NOT EXISTS idx_products_url ON products(url);
    CREATE INDEX IF NOT EXISTS idx_products_category_id ON products(category_id);
    CREATE INDEX IF NOT EXISTS idx_products_is_active ON products(is_active);
    CREATE INDEX IF NOT EXISTS idx_products_last_crawled_at ON products(last_crawled_at);
    CREATE INDEX IF NOT EXISTS idx_products_created_at ON products(created_at);
    CREATE INDEX IF NOT EXISTS idx_products_name_gin ON products USING gin(to_tsvector('korean', name));

    -- 가격 이력 인덱스
    CREATE INDEX IF NOT EXISTS idx_price_history_product_id_created_at ON price_history(product_id, created_at DESC);

    -- 검색 관련 인덱스
    CREATE INDEX IF NOT EXISTS idx_search_history_user_id_created_at ON search_history(user_id, created_at DESC);
    CREATE INDEX IF NOT EXISTS idx_search_history_query ON search_history(query);
    CREATE INDEX IF NOT EXISTS idx_search_history_created_at ON search_history(created_at DESC);

    -- 크롤링 작업 인덱스
    CREATE INDEX IF NOT EXISTS idx_crawl_jobs_status ON crawl_jobs(status);
    CREATE INDEX IF NOT EXISTS idx_crawl_jobs_keyword ON crawl_jobs(keyword);
    CREATE INDEX IF NOT EXISTS idx_crawl_jobs_created_at ON crawl_jobs(created_at DESC);

    -- 분석 관련 인덱스
    CREATE INDEX IF NOT EXISTS idx_analysis_requests_user_id ON analysis_requests(user_id);
    CREATE INDEX IF NOT EXISTS idx_analysis_requests_product_id ON analysis_requests(product_id);
    CREATE INDEX IF NOT EXISTS idx_analysis_requests_task_id ON analysis_requests(task_id);
    CREATE INDEX IF NOT EXISTS idx_analysis_requests_status ON analysis_requests(status);
    CREATE INDEX IF NOT EXISTS idx_analysis_requests_created_at ON analysis_requests(created_at DESC);

    CREATE INDEX IF NOT EXISTS idx_analysis_results_product_id ON analysis_results(product_id);
    CREATE INDEX IF NOT EXISTS idx_analysis_results_task_id ON analysis_results(task_id);
    CREATE INDEX IF NOT EXISTS idx_analysis_results_status ON analysis_results(status);
    CREATE INDEX IF NOT EXISTS idx_analysis_results_created_at ON analysis_results(created_at DESC);

    -- 관심 상품 인덱스
    CREATE INDEX IF NOT EXISTS idx_watch_list_user_id ON watch_list(user_id);
    CREATE INDEX IF NOT EXISTS idx_watch_list_product_id ON watch_list(product_id);
    CREATE INDEX IF NOT EXISTS idx_watch_list_is_active ON watch_list(is_active);

    -- 알림 관련 인덱스
    CREATE INDEX IF NOT EXISTS idx_notification_logs_user_id ON notification_logs(user_id);
    CREATE INDEX IF NOT EXISTS idx_notification_logs_type ON notification_logs(type);
    CREATE INDEX IF NOT EXISTS idx_notification_logs_channel ON notification_logs(channel);
    CREATE INDEX IF NOT EXISTS idx_notification_logs_status ON notification_logs(status);
    CREATE INDEX IF NOT EXISTS idx_notification_logs_created_at ON notification_logs(created_at DESC);

    -- ========================================
    -- 9. 트리거 함수 (updated_at 자동 업데이트)
    -- ========================================

    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    -- updated_at 트리거 생성
    DROP TRIGGER IF EXISTS update_users_updated_at ON users;
    CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    DROP TRIGGER IF EXISTS update_user_profiles_updated_at ON user_profiles;
    CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON user_profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    DROP TRIGGER IF EXISTS update_categories_updated_at ON categories;
    CREATE TRIGGER update_categories_updated_at BEFORE UPDATE ON categories FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    DROP TRIGGER IF EXISTS update_products_updated_at ON products;
    CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    DROP TRIGGER IF EXISTS update_crawl_jobs_updated_at ON crawl_jobs;
    CREATE TRIGGER update_crawl_jobs_updated_at BEFORE UPDATE ON crawl_jobs FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    DROP TRIGGER IF EXISTS update_analysis_results_updated_at ON analysis_results;
    CREATE TRIGGER update_analysis_results_updated_at BEFORE UPDATE ON analysis_results FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    DROP TRIGGER IF EXISTS update_watch_list_updated_at ON watch_list;
    CREATE TRIGGER update_watch_list_updated_at BEFORE UPDATE ON watch_list FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    DROP TRIGGER IF EXISTS update_notification_settings_updated_at ON notification_settings;
    CREATE TRIGGER update_notification_settings_updated_at BEFORE UPDATE ON notification_settings FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    DROP TRIGGER IF EXISTS update_system_config_updated_at ON system_config;
    CREATE TRIGGER update_system_config_updated_at BEFORE UPDATE ON system_config FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    -- ========================================
    -- 10. 기본 데이터 삽입
    -- ========================================

    -- 기본 카테고리 데이터
    INSERT INTO categories (id, name, parent_id, path, level) VALUES
    ('cat_electronics', '전자제품', NULL, '전자제품', 0),
    ('cat_computers', '컴퓨터/노트북', 'cat_electronics', '전자제품 > 컴퓨터/노트북', 1),
    ('cat_smartphones', '스마트폰', 'cat_electronics', '전자제품 > 스마트폰', 1),
    ('cat_home', '생활용품', NULL, '생활용품', 0),
    ('cat_kitchen', '주방용품', 'cat_home', '생활용품 > 주방용품', 1)
    ON CONFLICT (id) DO NOTHING;

    -- 기본 시스템 설정
    INSERT INTO system_config (key, value, description) VALUES
    ('crawler_default_max_links', '10', '크롤링 기본 최대 링크 수'),
    ('analysis_timeout_seconds', '300', '분석 작업 타임아웃 (초)'),
    ('price_alert_check_interval', '3600', '가격 알림 체크 간격 (초)'),
    ('search_result_cache_ttl', '1800', '검색 결과 캐시 TTL (초)')
    ON CONFLICT (key) DO NOTHING;

    -- 완료 메시지 출력
    DO $$
    BEGIN
        RAISE NOTICE '========================================';
        RAISE NOTICE 'RDS PostgreSQL 테이블 설정 완료!';
        RAISE NOTICE '========================================';
        RAISE NOTICE '생성된 테이블:';
        RAISE NOTICE '- 사용자 관리: users, user_profiles, user_sessions';
        RAISE NOTICE '- 상품 관리: categories, products, price_history';
        RAISE NOTICE '- 검색/크롤링: search_history, crawl_jobs, crawl_job_products';
        RAISE NOTICE '- 분석: analysis_requests, analysis_results';
        RAISE NOTICE '- 관심상품: watch_list';
        RAISE NOTICE '- 알림: notification_logs, notification_settings';
        RAISE NOTICE '- 시스템: system_config';
        RAISE NOTICE '========================================';
    END $$;